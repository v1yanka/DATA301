# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv("athlete_events.csv")
# Filter only Summer Olympics
df_summer <- filter(df, Season == "Summer")
# Define UI
ui <- fluidPage(
titlePanel("Summer Olympic Medal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("sports", "Select Sports:",
choices = c("All Sports", unique(df_summer$Sport)),
selected = "All Sports", multiple = TRUE),
selectInput("nocs", "Select NOCs:",
choices = c("All NOCs", unique(df_summer$NOC)),
selected = "All NOCs", multiple = TRUE),
sliderInput("year_range", "Select Year Range:",
min = min(df_summer$Year), max = max(df_summer$Year),
value = c(min(df_summer$Year), max(df_summer$Year))),
radioButtons("bar_mode", "Bar Chart Mode:",
choices = c("Stacked", "Side-by-Side"))
),
mainPanel(
h3("Medal Count by NOC"),
plotOutput("medalPlot"),
h3("Athletes vs Events"),
plotOutput("athleteEventPlot")
)
)
)
# Define server logic
server <- function(input, output) {
filterData <- reactive({
df_filtered <- df_summer
# Filter by sports
if (!"All Sports" %in% input$sports) {
df_filtered <- filter(df_filtered, Sport %in% input$sports)
}
# Filter by NOCs
if (!"All NOCs" %in% input$nocs) {
df_filtered <- filter(df_filtered, NOC %in% input$nocs)
}
# Filter by year range
df_filtered <- filter(df_filtered, Year >= input$year_range[1], Year <= input$year_range[2])
df_filtered
})
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(NOC, Year, Event, Medal) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = reorder(NOC, Count), y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(NOC, Year, Event, Medal) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = NOC, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv("athlete_events.csv")
# Filter only Summer Olympics
df_summer <- filter(df, Season == "Summer")
# Define UI
ui <- fluidPage(
titlePanel("Summer Olympic Medal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("sports", "Select Sports:",
choices = c("All Sports", unique(df_summer$Sport)),
selected = "All Sports", multiple = TRUE),
selectInput("nocs", "Select NOCs:",
choices = c("All NOCs", unique(df_summer$NOC)),
selected = "All NOCs", multiple = TRUE),
sliderInput("year_range", "Select Year Range:",
min = min(df_summer$Year), max = max(df_summer$Year),
value = c(min(df_summer$Year), max(df_summer$Year))),
radioButtons("bar_mode", "Bar Chart Mode:",
choices = c("Stacked", "Side-by-Side"))
),
mainPanel(
h3("Medal Count by NOC"),
plotOutput("medalPlot"),
h3("Athletes vs Events"),
plotOutput("athleteEventPlot")
)
)
)
# Define server logic
server <- function(input, output) {
filterData <- reactive({
df_filtered <- df_summer
# Filter by sports
if (!"All Sports" %in% input$sports) {
df_filtered <- filter(df_filtered, Sport %in% input$sports)
}
# Filter by NOCs
if (!"All NOCs" %in% input$nocs) {
df_filtered <- filter(df_filtered, NOC %in% input$nocs)
}
# Filter by year range
df_filtered <- filter(df_filtered, Year >= input$year_range[1], Year <= input$year_range[2])
df_filtered
})
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(NOC, Year, Event, Medal) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = NOC, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv("athlete_events.csv")
# Filter only Summer Olympics
df_summer <- filter(df, Season == "Summer")
# Define UI
ui <- fluidPage(
titlePanel("Summer Olympic Medal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("sports", "Select Sports:",
choices = c("All Sports", unique(df_summer$Sport)),
selected = "All Sports", multiple = TRUE),
selectInput("nocs", "Select NOCs:",
choices = c("All NOCs", unique(df_summer$NOC)),
selected = "All NOCs", multiple = TRUE),
sliderInput("year_range", "Select Year Range:",
min = min(df_summer$Year), max = max(df_summer$Year),
value = c(min(df_summer$Year), max(df_summer$Year))),
radioButtons("bar_mode", "Bar Chart Mode:",
choices = c("Stacked", "Side-by-Side"))
),
mainPanel(
h3("Medal Count by NOC"),
plotOutput("medalPlot"),
h3("Athletes vs Events"),
plotOutput("athleteEventPlot")
)
)
)
# Define server logic
server <- function(input, output) {
filterData <- reactive({
df_filtered <- df_summer
# Filter by sports
if (!"All Sports" %in% input$sports) {
df_filtered <- filter(df_filtered, Sport %in% input$sports)
}
# Filter by NOCs
if (!"All NOCs" %in% input$nocs) {
df_filtered <- filter(df_filtered, NOC %in% input$nocs)
}
# Filter by year range
df_filtered <- filter(df_filtered, Year >= input$year_range[1], Year <= input$year_range[2])
df_filtered
})
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(Event) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = NOC, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(summer_olympics)
View(summer_data)
View(noc_medals)
View(olympic_data)
View(scatter_data)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df <- read.csv("athlete_events.csv")
# Filter only Summer Olympics
df_summer <- filter(df, Season == "Summer")
# Define UI
ui <- fluidPage(
titlePanel("Summer Olympic Medal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("sports", "Select Sports:",
choices = c("All Sports", unique(df_summer$Sport)),
selected = "All Sports", multiple = TRUE),
selectInput("nocs", "Select NOCs:",
choices = c("All NOCs", unique(df_summer$NOC)),
selected = "All NOCs", multiple = TRUE),
sliderInput("year_range", "Select Year Range:",
min = min(df_summer$Year), max = max(df_summer$Year),
value = c(min(df_summer$Year), max(df_summer$Year))),
radioButtons("bar_mode", "Bar Chart Mode:",
choices = c("Stacked", "Side-by-Side"))
),
mainPanel(
h3("Medal Count by NOC"),
plotOutput("medalPlot"),
h3("Athletes vs Events"),
plotOutput("athleteEventPlot")
)
)
)
# Define server logic
server <- function(input, output) {
filterData <- reactive({
df_filtered <- df_summer
# Filter by sports
if (!"All Sports" %in% input$sports) {
df_filtered <- filter(df_filtered, Sport %in% input$sports)
}
# Filter by NOCs
if (!"All NOCs" %in% input$nocs) {
df_filtered <- filter(df_filtered, NOC %in% input$nocs)
}
# Filter by year range
df_filtered <- filter(df_filtered, Year >= input$year_range[1], Year <= input$year_range[2])
df_filtered
})
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(NOC, Year, Event, Medal) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = NOC, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df_summer <- read.csv("athlete_events.csv")
# Filter only Summer Olympics
df_summer <- filter(df, Season == "Summer")
# Define UI
ui <- fluidPage(
titlePanel("Summer Olympic Medal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("sports", "Select Sports:",
choices = c("All Sports", unique(df_summer$Sport)),
selected = "All Sports", multiple = TRUE),
selectInput("nocs", "Select NOCs:",
choices = c("All NOCs", unique(df_summer$NOC)),
selected = "All NOCs", multiple = TRUE),
sliderInput("year_range", "Select Year Range:",
min = min(df_summer$Year), max = max(df_summer$Year),
value = c(min(df_summer$Year), max(df_summer$Year))),
radioButtons("bar_mode", "Bar Chart Mode:",
choices = c("Stacked", "Side-by-Side"))
),
mainPanel(
h3("Medal Count by NOC"),
plotOutput("medalPlot"),
h3("Athletes vs Events"),
plotOutput("athleteEventPlot")
)
)
)
# Define server logic
server <- function(input, output) {
filterData <- reactive({
df_filtered <- df_summer
# Filter by sports
if (!"All Sports" %in% input$sports) {
df_filtered <- filter(df_filtered, Sport %in% input$sports)
}
# Filter by NOCs
if (!"All NOCs" %in% input$nocs) {
df_filtered <- filter(df_filtered, NOC %in% input$nocs)
}
# Filter by year range
df_filtered <- filter(df_filtered, Year >= input$year_range[1], Year <= input$year_range[2])
df_filtered
})
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(NOC, Year, Event, Medal) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = NOC, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(dplyr)
# Load the data
df_summer <- read.csv("athlete_events.csv")
# Filter only Summer Olympics
df_summer <- filter(df, Season == "Summer")
# Define UI
ui <- fluidPage(
titlePanel("Summer Olympic Medal Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("sports", "Select Sports:",
choices = c("All Sports", unique(df_summer$Sport)),
selected = "All Sports", multiple = TRUE),
selectInput("nocs", "Select NOCs:",
choices = c("All NOCs", unique(df_summer$NOC)),
selected = "All NOCs", multiple = TRUE),
sliderInput("year_range", "Select Year Range:",
min = min(df_summer$Year), max = max(df_summer$Year),
value = c(min(df_summer$Year), max(df_summer$Year))),
radioButtons("bar_mode", "Bar Chart Mode:",
choices = c("Stacked", "Side-by-Side"))
),
mainPanel(
h3("Medal Count by NOC"),
plotOutput("medalPlot"),
h3("Athletes vs Events"),
plotOutput("athleteEventPlot")
)
)
)
# Define server logic
server <- function(input, output) {
filterData <- reactive({
df_filtered <- df_summer
# Filter by sports
if (!"All Sports" %in% input$sports) {
df_filtered <- filter(df_filtered, Sport %in% input$sports)
}
# Filter by NOCs
if (!"All NOCs" %in% input$nocs) {
df_filtered <- filter(df_filtered, NOC %in% input$nocs)
}
# Filter by year range
df_filtered <- filter(df_filtered, Year >= input$year_range[1], Year <= input$year_range[2])
df_filtered
})
# Medal count plot
output$medalPlot <- renderPlot({
df_medal <- filterData() %>%
filter(!is.na(Medal)) %>%
distinct(NOC, Year, Event, Medal) %>%  # Ensure only one medal per event per NOC
group_by(NOC, Medal) %>%
summarize(Count = n(), .groups = 'drop')
ggplot(df_medal, aes(x = NOC, y = Count, fill = Medal)) +
geom_bar(stat = "identity", position = ifelse(input$bar_mode == "Stacked", "stack", "dodge")) +
scale_fill_manual(values = c("Gold" = "gold", "Silver" = "grey", "Bronze" = "brown")) +
xlab("NOC") +
ylab("Number of Medals") +
labs(title = "Medal Count by NOC")
})
# Athletes vs Events plot
output$athleteEventPlot <- renderPlot({
df_events <- filterData() %>%
group_by(Games, Year) %>%
summarize(Athletes = n_distinct(ID), Events = n_distinct(Event), .groups = 'drop')
ggplot(df_events, aes(x = Athletes, y = Events)) +
geom_point(aes(color = factor(Year)), size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
xlab("Number of Athletes") +
ylab("Number of Events") +
labs(title = "Number of Athletes vs Number of Events")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/Desktop/301/Assignment 2/NetballAnalyser.R')
runApp('~/Desktop/301/Assignment 2/NetballAnalyser.R')
runApp('~/Desktop/301/Assignment 2/NetballAnalyser.R')
runApp('~/Desktop/301/Assignment 2/MCU_Profit_Analysis.R')
library(shiny); runApp('a2_data301.R')
runApp('a2_data301.R')
runApp('a2_data301.R')
shiny::runApp()
runApp('a2_data301.R')
